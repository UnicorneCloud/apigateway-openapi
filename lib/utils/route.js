"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResourceByUrl = exports.generateRoute = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const open_api_1 = require("./open-api");
function generateRoute({ scope, root, lambdaProps, url, method, authorizer, apiKeyRequired, schemaProps, }) {
    const currentRoute = (0, exports.getResourceByUrl)(root, url);
    const lambda = new aws_cdk_lib_1.aws_lambda_nodejs.NodejsFunction(scope, `${method}${url}`, {
        ...lambdaProps,
    });
    const lambdaIntegration = new aws_cdk_lib_1.aws_apigateway.LambdaIntegration(lambda);
    let methodsParams = {
        requestModels: {},
    };
    if (authorizer && !apiKeyRequired) {
        methodsParams = {
            authorizer,
        };
    }
    else if (apiKeyRequired) {
        methodsParams = {
            apiKeyRequired: true,
        };
    }
    const methodResource = currentRoute.addMethod(method, lambdaIntegration, methodsParams);
    (0, open_api_1.addMetadatas)(methodResource.node, schemaProps);
    // Generate OpenAPI spec
    let path;
    return {
        lambda,
        path,
    };
}
exports.generateRoute = generateRoute;
const resourceTree = {
    children: {},
    resource: {},
};
const getResourceByUrl = (rootResource, url) => {
    resourceTree.resource = rootResource;
    const segments = url.split("/");
    let currentNode = resourceTree;
    for (const segment of segments) {
        if (segment === "") {
            continue;
        }
        if (segment in currentNode.children) {
            currentNode = currentNode.children[segment];
        }
        else {
            const newResource = currentNode.resource.addResource(segment);
            const newNode = { children: {}, resource: newResource };
            currentNode.children[segment] = newNode;
            currentNode = newNode;
        }
    }
    return currentNode.resource;
};
exports.getResourceByUrl = getResourceByUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FJcUI7QUFFckIseUNBQXVEO0FBYXZELFNBQWdCLGFBQWEsQ0FBQyxFQUM1QixLQUFLLEVBQ0wsSUFBSSxFQUNKLFdBQVcsRUFDWCxHQUFHLEVBQ0gsTUFBTSxFQUNOLFVBQVUsRUFDVixjQUFjLEVBQ2QsV0FBVyxHQUNBO0lBQ1gsTUFBTSxZQUFZLEdBQUcsSUFBQSx3QkFBZ0IsRUFBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFakQsTUFBTSxNQUFNLEdBQUcsSUFBSSwrQkFBWSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxFQUFFLEVBQUU7UUFDdkUsR0FBRyxXQUFXO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLDRCQUFVLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkUsSUFBSSxhQUFhLEdBQTZCO1FBQzVDLGFBQWEsRUFBRSxFQUFFO0tBQ2xCLENBQUM7SUFFRixJQUFJLFVBQVUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2xDLGFBQWEsR0FBRztZQUNkLFVBQVU7U0FDWCxDQUFDO0lBQ0osQ0FBQztTQUFNLElBQUksY0FBYyxFQUFFLENBQUM7UUFDMUIsYUFBYSxHQUFHO1lBQ2QsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUMzQyxNQUFNLEVBQ04saUJBQWlCLEVBQ2pCLGFBQWEsQ0FDZCxDQUFDO0lBQ0YsSUFBQSx1QkFBWSxFQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFL0Msd0JBQXdCO0lBQ3hCLElBQUksSUFBcUUsQ0FBQztJQUUxRSxPQUFPO1FBQ0wsTUFBTTtRQUNOLElBQUk7S0FDTCxDQUFDO0FBQ0osQ0FBQztBQTdDRCxzQ0E2Q0M7QUFNRCxNQUFNLFlBQVksR0FBUztJQUN6QixRQUFRLEVBQUUsRUFBRTtJQUNaLFFBQVEsRUFBRSxFQUEwQjtDQUNyQyxDQUFDO0FBRUssTUFBTSxnQkFBZ0IsR0FBRyxDQUM5QixZQUFrQyxFQUNsQyxHQUFXLEVBQ1csRUFBRTtJQUN4QixZQUFZLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztJQUVyQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQztJQUUvQixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQy9CLElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ25CLFNBQVM7UUFDWCxDQUFDO1FBRUQsSUFBSSxPQUFPLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsTUFBTSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsQ0FBQztZQUN4RCxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUN4QyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQXpCVyxRQUFBLGdCQUFnQixvQkF5QjNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXdzX2FwaWdhdGV3YXkgYXMgYXBpZ2F0ZXdheSxcbiAgYXdzX3MzIGFzIHMzLFxuICBhd3NfbGFtYmRhX25vZGVqcyBhcyBsYW1iZGFOb2RlSnMsXG59IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IGFkZE1ldGFkYXRhcywgU2NoZW1hUHJvcHMgfSBmcm9tIFwiLi9vcGVuLWFwaVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlUHJvcHMge1xuICBzY29wZTogQ29uc3RydWN0O1xuICByb290OiBhcGlnYXRld2F5LklSZXNvdXJjZTtcbiAgdXJsOiBzdHJpbmc7XG4gIGxhbWJkYVByb3BzOiBsYW1iZGFOb2RlSnMuTm9kZWpzRnVuY3Rpb25Qcm9wcztcbiAgbWV0aG9kOiBzMy5IdHRwTWV0aG9kcztcbiAgYXV0aG9yaXplcj86IGFwaWdhdGV3YXkuSUF1dGhvcml6ZXI7XG4gIGFwaUtleVJlcXVpcmVkPzogYm9vbGVhbjtcbiAgc2NoZW1hUHJvcHM/OiBTY2hlbWFQcm9wcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUm91dGUoe1xuICBzY29wZSxcbiAgcm9vdCxcbiAgbGFtYmRhUHJvcHMsXG4gIHVybCxcbiAgbWV0aG9kLFxuICBhdXRob3JpemVyLFxuICBhcGlLZXlSZXF1aXJlZCxcbiAgc2NoZW1hUHJvcHMsXG59OiBSb3V0ZVByb3BzKSB7XG4gIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IGdldFJlc291cmNlQnlVcmwocm9vdCwgdXJsKTtcblxuICBjb25zdCBsYW1iZGEgPSBuZXcgbGFtYmRhTm9kZUpzLk5vZGVqc0Z1bmN0aW9uKHNjb3BlLCBgJHttZXRob2R9JHt1cmx9YCwge1xuICAgIC4uLmxhbWJkYVByb3BzLFxuICB9KTtcblxuICBjb25zdCBsYW1iZGFJbnRlZ3JhdGlvbiA9IG5ldyBhcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKGxhbWJkYSk7XG4gIGxldCBtZXRob2RzUGFyYW1zOiBhcGlnYXRld2F5Lk1ldGhvZE9wdGlvbnMgPSB7XG4gICAgcmVxdWVzdE1vZGVsczoge30sXG4gIH07XG5cbiAgaWYgKGF1dGhvcml6ZXIgJiYgIWFwaUtleVJlcXVpcmVkKSB7XG4gICAgbWV0aG9kc1BhcmFtcyA9IHtcbiAgICAgIGF1dGhvcml6ZXIsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChhcGlLZXlSZXF1aXJlZCkge1xuICAgIG1ldGhvZHNQYXJhbXMgPSB7XG4gICAgICBhcGlLZXlSZXF1aXJlZDogdHJ1ZSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kUmVzb3VyY2UgPSBjdXJyZW50Um91dGUuYWRkTWV0aG9kKFxuICAgIG1ldGhvZCxcbiAgICBsYW1iZGFJbnRlZ3JhdGlvbixcbiAgICBtZXRob2RzUGFyYW1zXG4gICk7XG4gIGFkZE1ldGFkYXRhcyhtZXRob2RSZXNvdXJjZS5ub2RlLCBzY2hlbWFQcm9wcyk7XG5cbiAgLy8gR2VuZXJhdGUgT3BlbkFQSSBzcGVjXG4gIGxldCBwYXRoOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBhbnk+Pj4gfCB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsYW1iZGEsXG4gICAgcGF0aCxcbiAgfTtcbn1cblxudHlwZSBOb2RlID0ge1xuICBjaGlsZHJlbjogeyBba2V5OiBzdHJpbmddOiBOb2RlIH07XG4gIHJlc291cmNlOiBhcGlnYXRld2F5LklSZXNvdXJjZTtcbn07XG5jb25zdCByZXNvdXJjZVRyZWU6IE5vZGUgPSB7XG4gIGNoaWxkcmVuOiB7fSxcbiAgcmVzb3VyY2U6IHt9IGFzIGFwaWdhdGV3YXkuSVJlc291cmNlLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldFJlc291cmNlQnlVcmwgPSAoXG4gIHJvb3RSZXNvdXJjZTogYXBpZ2F0ZXdheS5JUmVzb3VyY2UsXG4gIHVybDogc3RyaW5nXG4pOiBhcGlnYXRld2F5LklSZXNvdXJjZSA9PiB7XG4gIHJlc291cmNlVHJlZS5yZXNvdXJjZSA9IHJvb3RSZXNvdXJjZTtcblxuICBjb25zdCBzZWdtZW50cyA9IHVybC5zcGxpdChcIi9cIik7XG4gIGxldCBjdXJyZW50Tm9kZSA9IHJlc291cmNlVHJlZTtcblxuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCJcIikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnQgaW4gY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuY2hpbGRyZW5bc2VnbWVudF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1Jlc291cmNlID0gY3VycmVudE5vZGUucmVzb3VyY2UuYWRkUmVzb3VyY2Uoc2VnbWVudCk7XG4gICAgICBjb25zdCBuZXdOb2RlID0geyBjaGlsZHJlbjoge30sIHJlc291cmNlOiBuZXdSZXNvdXJjZSB9O1xuICAgICAgY3VycmVudE5vZGUuY2hpbGRyZW5bc2VnbWVudF0gPSBuZXdOb2RlO1xuICAgICAgY3VycmVudE5vZGUgPSBuZXdOb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50Tm9kZS5yZXNvdXJjZTtcbn07XG4iXX0=