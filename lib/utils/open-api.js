"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOpenApiFile = exports.addMetadatas = void 0;
const fs = require("fs");
const path = require("path");
function extractPathParameters(url) {
    // Regular expression to match {something}
    const regex = /\{[^}]+\}/g;
    // Find all matches
    const matches = url.match(regex);
    // If no matches are found, return an empty array
    if (!matches) {
        return [];
    }
    // Remove the curly braces from each match
    const parameters = matches.map((match) => match.slice(1, -1));
    return parameters;
}
const addMetadatas = (node, schemaProps) => {
    node.addMetadata("requestBodySchema", schemaProps?.requestBodySchema);
    node.addMetadata("responseSchema", schemaProps?.responseSchema);
    node.addMetadata("queryStringSchema", schemaProps?.queryStringSchema);
    node.addMetadata("responseTypeIsArray", schemaProps?.responseTypeIsArray);
};
exports.addMetadatas = addMetadatas;
const generateOpenApiSpec = (url, method, schemaProps) => {
    let requestBodySchema = schemaProps.requestBodySchema;
    const pathParametersSchema = extractPathParameters(url).map((param) => ({
        name: param,
        in: "path",
        description: `URL param for ${param}`,
        required: true,
        schema: {
            type: "string",
        },
    }));
    let responseSchemaRef = schemaProps.responseSchema;
    let responseSchema;
    if (schemaProps.responseTypeIsArray) {
        responseSchema = {
            type: "array",
            items: {
                $ref: `#/components/schemas/${responseSchemaRef}`,
            },
        };
    }
    else {
        responseSchema = {
            $ref: `#/components/schemas/${responseSchemaRef}`,
        };
    }
    const openApiSpec = {
        [url]: {
            [method.toLowerCase()]: {
                ...(requestBodySchema &&
                    method.toLowerCase() != "get" && {
                    requestBody: {
                        content: {
                            "application/json": {
                                schema: { $ref: `#/components/schemas/${requestBodySchema}` },
                            },
                        },
                    },
                }),
                ...(pathParametersSchema && {
                    parameters: pathParametersSchema,
                }),
                // ...(queryStringParametersSchema && {
                //   parameters: [
                //     {
                //       in: "query",
                //       schema: {
                //         $ref: `#/components/schemas/${queryStringParametersSchema}`,
                //       },
                //     },
                //   ],
                // }),
                responses: {
                    200: {
                        description: "Successful response",
                        content: {
                            "application/json": {
                                schema: responseSchema,
                            },
                        },
                    },
                },
            },
        },
    };
    return openApiSpec;
};
/**
 * Generate OpenAPI file
 * Pass the API Gateway RestAPI and the schemas to generate the OpenAPI file
 * @param api - API Gateway RestAPI
 * @param schemas - Schemas to be used in the OpenAPI file, usually the same as the ones used in the API ... this should be the same contract as the OpenAPI-ts SchemaObject
 * @returns void
 */
function generateOpenApiFile(api, schemas) {
    // @ts-ignore
    const apiPaths = api.methods.reduce((acc, method) => {
        if (method.httpMethod === "OPTIONS") {
            return acc;
        }
        const normalizedPath = method.node.scope.path.replace("/api", "");
        const requestBodySchema = method.node.metadata.find((metadata) => metadata.type === "requestBodySchema");
        const responseSchema = method.node.metadata.find((metadata) => metadata.type === "responseSchema");
        const queryStringSchema = method.node.metadata.find((metadata) => metadata.type === "queryStringSchema");
        const responseTypeIsArray = method.node.metadata.find((metadata) => metadata.type === "responseTypeIsArray");
        acc.push({
            path: normalizedPath,
            method: method.httpMethod,
            schemaProps: {
                requestBodySchema: requestBodySchema?.data,
                responseSchema: responseSchema?.data,
                queryStringSchema: queryStringSchema?.data,
                responseTypeIsArray: responseTypeIsArray?.data,
            },
        });
        return acc;
    }, []);
    const paths = [];
    for (const element of apiPaths) {
        const apiPath = element;
        const path = generateOpenApiSpec(apiPath.path, apiPath.method, apiPath.schemaProps);
        paths.push(path);
    }
    const openApiSpec = {
        openapi: "3.0.0",
        info: {
            title: "API",
            version: "1.0.0",
        },
        paths: mergeObjects(...paths),
        components: {
            schemas,
        },
    };
    fs.writeFileSync(path.resolve(__dirname, "../../openapi.json"), JSON.stringify(openApiSpec, null, 2));
}
exports.generateOpenApiFile = generateOpenApiFile;
const isObject = (obj) => obj && typeof obj === "object";
const mergeObjects = (...objects) => {
    return objects.reduce((acc, obj) => {
        Object.keys(obj).forEach((key) => {
            const accValue = acc[key];
            const objValue = obj[key];
            if (Array.isArray(accValue) && Array.isArray(objValue)) {
                acc[key] = accValue.concat(...objValue);
            }
            else if (isObject(accValue) && isObject(objValue)) {
                acc[key] = mergeObjects(accValue, objValue);
            }
            else {
                acc[key] = objValue;
            }
        });
        return acc;
    }, {});
};
//# sourceMappingURL=data:application/json;base64,