"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResourceByUrl = exports.generateRoute = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const open_api_1 = require("./open-api");
function generateRoute({ scope, root, lambdaProps, url, method, authorizer, apiKeyRequired, schemaProps, }) {
    const currentRoute = (0, exports.getResourceByUrl)(root, url);
    const lambda = new aws_cdk_lib_1.aws_lambda_nodejs.NodejsFunction(scope, `${method}${url}`, {
        ...lambdaProps,
    });
    const lambdaIntegration = new aws_cdk_lib_1.aws_apigateway.LambdaIntegration(lambda);
    let methodsParams = {
        requestModels: {},
    };
    if (authorizer && !apiKeyRequired) {
        methodsParams = {
            authorizer,
        };
    }
    else if (apiKeyRequired) {
        methodsParams = {
            apiKeyRequired: true,
        };
    }
    const methodResource = currentRoute.addMethod(method, lambdaIntegration, methodsParams);
    (0, open_api_1.addMetadatas)(methodResource.node, schemaProps);
    // Generate OpenAPI spec
    return lambda;
}
exports.generateRoute = generateRoute;
const resourceTree = {
    children: {},
    resource: {},
};
const getResourceByUrl = (rootResource, url) => {
    resourceTree.resource = rootResource;
    const segments = url.split("/");
    let currentNode = resourceTree;
    for (const segment of segments) {
        if (segment === "") {
            continue;
        }
        if (segment in currentNode.children) {
            currentNode = currentNode.children[segment];
        }
        else {
            const newResource = currentNode.resource.addResource(segment);
            const newNode = { children: {}, resource: newResource };
            currentNode.children[segment] = newNode;
            currentNode = newNode;
        }
    }
    return currentNode.resource;
};
exports.getResourceByUrl = getResourceByUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMvcm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBSXFCO0FBRXJCLHlDQUF1RDtBQWF2RCxTQUFnQixhQUFhLENBQUMsRUFDNUIsS0FBSyxFQUNMLElBQUksRUFDSixXQUFXLEVBQ1gsR0FBRyxFQUNILE1BQU0sRUFDTixVQUFVLEVBQ1YsY0FBYyxFQUNkLFdBQVcsR0FDQTtJQUNYLE1BQU0sWUFBWSxHQUFHLElBQUEsd0JBQWdCLEVBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRWpELE1BQU0sTUFBTSxHQUFHLElBQUksK0JBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsTUFBTSxHQUFHLEdBQUcsRUFBRSxFQUFFO1FBQ3ZFLEdBQUcsV0FBVztLQUNmLENBQUMsQ0FBQztJQUVILE1BQU0saUJBQWlCLEdBQUcsSUFBSSw0QkFBVSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25FLElBQUksYUFBYSxHQUE2QjtRQUM1QyxhQUFhLEVBQUUsRUFBRTtLQUNsQixDQUFDO0lBRUYsSUFBSSxVQUFVLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNsQyxhQUFhLEdBQUc7WUFDZCxVQUFVO1NBQ1gsQ0FBQztJQUNKLENBQUM7U0FBTSxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzFCLGFBQWEsR0FBRztZQUNkLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FDM0MsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixhQUFhLENBQ2QsQ0FBQztJQUNGLElBQUEsdUJBQVksRUFBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRS9DLHdCQUF3QjtJQUN4QixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBeENELHNDQXdDQztBQU1ELE1BQU0sWUFBWSxHQUFTO0lBQ3pCLFFBQVEsRUFBRSxFQUFFO0lBQ1osUUFBUSxFQUFFLEVBQTBCO0NBQ3JDLENBQUM7QUFFSyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLFlBQWtDLEVBQ2xDLEdBQVcsRUFDVyxFQUFFO0lBQ3hCLFlBQVksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBRXJDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0lBRS9CLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDbkIsU0FBUztRQUNYLENBQUM7UUFFRCxJQUFJLE9BQU8sSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5RCxNQUFNLE9BQU8sR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO1lBQ3hELFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO1lBQ3hDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBekJXLFFBQUEsZ0JBQWdCLG9CQXlCM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhd3NfYXBpZ2F0ZXdheSBhcyBhcGlnYXRld2F5LFxuICBhd3NfczMgYXMgczMsXG4gIGF3c19sYW1iZGFfbm9kZWpzIGFzIGxhbWJkYU5vZGVKcyxcbn0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgYWRkTWV0YWRhdGFzLCBTY2hlbWFQcm9wcyB9IGZyb20gXCIuL29wZW4tYXBpXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVQcm9wcyB7XG4gIHNjb3BlOiBDb25zdHJ1Y3Q7XG4gIHJvb3Q6IGFwaWdhdGV3YXkuSVJlc291cmNlO1xuICB1cmw6IHN0cmluZztcbiAgbGFtYmRhUHJvcHM6IGxhbWJkYU5vZGVKcy5Ob2RlanNGdW5jdGlvblByb3BzO1xuICBtZXRob2Q6IHMzLkh0dHBNZXRob2RzO1xuICBhdXRob3JpemVyPzogYXBpZ2F0ZXdheS5JQXV0aG9yaXplcjtcbiAgYXBpS2V5UmVxdWlyZWQ/OiBib29sZWFuO1xuICBzY2hlbWFQcm9wcz86IFNjaGVtYVByb3BzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSb3V0ZSh7XG4gIHNjb3BlLFxuICByb290LFxuICBsYW1iZGFQcm9wcyxcbiAgdXJsLFxuICBtZXRob2QsXG4gIGF1dGhvcml6ZXIsXG4gIGFwaUtleVJlcXVpcmVkLFxuICBzY2hlbWFQcm9wcyxcbn06IFJvdXRlUHJvcHMpIHtcbiAgY29uc3QgY3VycmVudFJvdXRlID0gZ2V0UmVzb3VyY2VCeVVybChyb290LCB1cmwpO1xuXG4gIGNvbnN0IGxhbWJkYSA9IG5ldyBsYW1iZGFOb2RlSnMuTm9kZWpzRnVuY3Rpb24oc2NvcGUsIGAke21ldGhvZH0ke3VybH1gLCB7XG4gICAgLi4ubGFtYmRhUHJvcHMsXG4gIH0pO1xuXG4gIGNvbnN0IGxhbWJkYUludGVncmF0aW9uID0gbmV3IGFwaWdhdGV3YXkuTGFtYmRhSW50ZWdyYXRpb24obGFtYmRhKTtcbiAgbGV0IG1ldGhvZHNQYXJhbXM6IGFwaWdhdGV3YXkuTWV0aG9kT3B0aW9ucyA9IHtcbiAgICByZXF1ZXN0TW9kZWxzOiB7fSxcbiAgfTtcblxuICBpZiAoYXV0aG9yaXplciAmJiAhYXBpS2V5UmVxdWlyZWQpIHtcbiAgICBtZXRob2RzUGFyYW1zID0ge1xuICAgICAgYXV0aG9yaXplcixcbiAgICB9O1xuICB9IGVsc2UgaWYgKGFwaUtleVJlcXVpcmVkKSB7XG4gICAgbWV0aG9kc1BhcmFtcyA9IHtcbiAgICAgIGFwaUtleVJlcXVpcmVkOiB0cnVlLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBtZXRob2RSZXNvdXJjZSA9IGN1cnJlbnRSb3V0ZS5hZGRNZXRob2QoXG4gICAgbWV0aG9kLFxuICAgIGxhbWJkYUludGVncmF0aW9uLFxuICAgIG1ldGhvZHNQYXJhbXNcbiAgKTtcbiAgYWRkTWV0YWRhdGFzKG1ldGhvZFJlc291cmNlLm5vZGUsIHNjaGVtYVByb3BzKTtcblxuICAvLyBHZW5lcmF0ZSBPcGVuQVBJIHNwZWNcbiAgcmV0dXJuIGxhbWJkYTtcbn1cblxudHlwZSBOb2RlID0ge1xuICBjaGlsZHJlbjogeyBba2V5OiBzdHJpbmddOiBOb2RlIH07XG4gIHJlc291cmNlOiBhcGlnYXRld2F5LklSZXNvdXJjZTtcbn07XG5jb25zdCByZXNvdXJjZVRyZWU6IE5vZGUgPSB7XG4gIGNoaWxkcmVuOiB7fSxcbiAgcmVzb3VyY2U6IHt9IGFzIGFwaWdhdGV3YXkuSVJlc291cmNlLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldFJlc291cmNlQnlVcmwgPSAoXG4gIHJvb3RSZXNvdXJjZTogYXBpZ2F0ZXdheS5JUmVzb3VyY2UsXG4gIHVybDogc3RyaW5nXG4pOiBhcGlnYXRld2F5LklSZXNvdXJjZSA9PiB7XG4gIHJlc291cmNlVHJlZS5yZXNvdXJjZSA9IHJvb3RSZXNvdXJjZTtcblxuICBjb25zdCBzZWdtZW50cyA9IHVybC5zcGxpdChcIi9cIik7XG4gIGxldCBjdXJyZW50Tm9kZSA9IHJlc291cmNlVHJlZTtcblxuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCJcIikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnQgaW4gY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuY2hpbGRyZW5bc2VnbWVudF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1Jlc291cmNlID0gY3VycmVudE5vZGUucmVzb3VyY2UuYWRkUmVzb3VyY2Uoc2VnbWVudCk7XG4gICAgICBjb25zdCBuZXdOb2RlID0geyBjaGlsZHJlbjoge30sIHJlc291cmNlOiBuZXdSZXNvdXJjZSB9O1xuICAgICAgY3VycmVudE5vZGUuY2hpbGRyZW5bc2VnbWVudF0gPSBuZXdOb2RlO1xuICAgICAgY3VycmVudE5vZGUgPSBuZXdOb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50Tm9kZS5yZXNvdXJjZTtcbn07XG4iXX0=